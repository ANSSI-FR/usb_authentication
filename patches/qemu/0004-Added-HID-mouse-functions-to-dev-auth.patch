From 95e0b3574c0d59df0dafa24f621875136d19755e Mon Sep 17 00:00:00 2001
From: Luc Bonnafoux <luc.bonnafoux@ssi.gouv.fr>
Date: Tue, 1 Jul 2025 08:27:59 +0200
Subject: [PATCH 4/5] Added HID mouse functions to dev-auth

---
 hw/usb/dev-auth.c         | 175 +++++++++++++++++++++++++++++++++++---
 include/hw/usb/dev-auth.h |   1 +
 2 files changed, 165 insertions(+), 11 deletions(-)

diff --git a/hw/usb/dev-auth.c b/hw/usb/dev-auth.c
index df27a94b49..ed262d7ece 100644
--- a/hw/usb/dev-auth.c
+++ b/hw/usb/dev-auth.c
@@ -54,6 +54,9 @@
 #include <mbedtls/build_info.h>
 #include <mbedtls/platform.h>
 
+#include "hw/input/hid.h"
+#include "hw/usb/hid.h"
+
 #include "hw/usb/dev-auth.h"
 
 #include "desc.h"
@@ -1044,6 +1047,97 @@ static void handle_authent_out(USBDevice *dev, USBPacket *p, int request, int va
   }
 }
 
+////////////////////////////////////////////////////////////////////////////////
+//
+// HID device functions
+//
+////////////////////////////////////////////////////////////////////////////////
+
+static const uint8_t qemu_mouse_hid_report_descriptor[] = {
+  0x05, 0x01,		/* Usage Page (Generic Desktop) */
+  0x09, 0x02,		/* Usage (Mouse) */
+  0xa1, 0x01,		/* Collection (Application) */
+  0x09, 0x01,		/*   Usage (Pointer) */
+  0xa1, 0x00,		/*   Collection (Physical) */
+  0x05, 0x09,		/*     Usage Page (Button) */
+  0x19, 0x01,		/*     Usage Minimum (1) */
+  0x29, 0x05,		/*     Usage Maximum (5) */
+  0x15, 0x00,		/*     Logical Minimum (0) */
+  0x25, 0x01,		/*     Logical Maximum (1) */
+  0x95, 0x05,		/*     Report Count (5) */
+  0x75, 0x01,		/*     Report Size (1) */
+  0x81, 0x02,		/*     Input (Data, Variable, Absolute) */
+  0x95, 0x01,		/*     Report Count (1) */
+  0x75, 0x03,		/*     Report Size (3) */
+  0x81, 0x01,		/*     Input (Constant) */
+  0x05, 0x01,		/*     Usage Page (Generic Desktop) */
+  0x09, 0x30,		/*     Usage (X) */
+  0x09, 0x31,		/*     Usage (Y) */
+  0x09, 0x38,		/*     Usage (Wheel) */
+  0x15, 0x81,		/*     Logical Minimum (-0x7f) */
+  0x25, 0x7f,		/*     Logical Maximum (0x7f) */
+  0x75, 0x08,		/*     Report Size (8) */
+  0x95, 0x03,		/*     Report Count (3) */
+  0x81, 0x06,		/*     Input (Data, Variable, Relative) */
+  0xc0,		/*   End Collection */
+  0xc0,		/* End Collection */
+};
+
+static void usb_hid_changed(HIDState *hs)
+{
+  struct UsbAuthState *as = container_of(hs, struct UsbAuthState, hid);
+
+  usb_wakeup(as->intr, 0);
+}
+
+static void usb_hid_handle_reset(USBDevice *dev)
+{
+  struct UsbAuthState *as = USB_AUTH(dev);
+
+  hid_reset(&as->hid);
+}
+
+static void usb_hid_unrealize(USBDevice *dev)
+{
+  struct UsbAuthState *as = USB_AUTH(dev);
+
+  hid_free(&as->hid);
+}
+
+static void usb_hid_handle_data(USBDevice *dev, USBPacket *p)
+{
+  struct UsbAuthState *as = USB_AUTH(dev);
+  HIDState *hs = &as->hid;
+  g_autofree uint8_t *buf = g_malloc(p->iov.size);
+  int len = 0;
+
+  switch (p->pid) {
+  case USB_TOKEN_IN:
+    if (p->ep->nr == 1) {
+      if (hs->kind == HID_MOUSE) {
+        hid_pointer_activate(hs);
+      }
+      if (!hid_has_events(hs)) {
+        p->status = USB_RET_NAK;
+        return;
+      }
+      hid_set_next_idle(hs);
+      if (hs->kind == HID_MOUSE) {
+        len = hid_pointer_poll(hs, buf, p->iov.size);
+      }
+      usb_packet_copy(p, buf, len);
+    } else {
+      goto fail;
+    }
+    break;
+  case USB_TOKEN_OUT:
+  default:
+  fail:
+    p->status = USB_RET_STALL;
+    break;
+  }
+}
+
 ////////////////////////////////////////////////////////////////////////////////
 //
 // QEMU USB device functions
@@ -1054,6 +1148,8 @@ static void handle_authent_out(USBDevice *dev, USBPacket *p, int request, int va
 static void usb_auth_handle_control(USBDevice *dev, USBPacket *p,
               int request, int value, int index, int length, uint8_t *data)
 {
+  struct UsbAuthState *as = USB_AUTH(dev);
+  HIDState *hs = &as->hid;
   int ret;
 
   /* Handle enumeration request */
@@ -1065,17 +1161,67 @@ static void usb_auth_handle_control(USBDevice *dev, USBPacket *p,
   /* Handle only authentication requests */
   switch (request) {
     case 0x8018: // AUTH_IN
-        info_report("usb_auth_handle_control: AUTH_IN");
-        handle_authent_in(dev, p, request, value, index, length, data);
-        break;
+      info_report("usb_auth_handle_control: AUTH_IN");
+      handle_authent_in(dev, p, request, value, index, length, data);
+      break;
     case 0x0019: // AUTH_OUT
-        info_report("usb_auth_handle_control: AUTH_OUT");
-        handle_authent_out(dev, p, request, value, index, length, data);
+      info_report("usb_auth_handle_control: AUTH_OUT");
+      handle_authent_out(dev, p, request, value, index, length, data);
+      break;
+
+
+    /* hid specific requests */
+    case InterfaceRequest | USB_REQ_GET_DESCRIPTOR:
+      switch (value >> 8) {
+      case 0x22:
+        if (hs->kind == HID_MOUSE) {
+          memcpy(data, qemu_mouse_hid_report_descriptor,
+                  sizeof(qemu_mouse_hid_report_descriptor));
+          p->actual_length = sizeof(qemu_mouse_hid_report_descriptor);
+        }
         break;
+      default:
+        goto fail;
+      }
+      break;
+    case HID_GET_REPORT:
+      if (hs->kind == HID_MOUSE) {
+        p->actual_length = hid_pointer_poll(hs, data, length);
+      }
+      break;
+    case HID_SET_REPORT:
+      goto fail;
+      break;
+    case HID_GET_PROTOCOL:
+      if (hs->kind != HID_MOUSE) {
+          goto fail;
+      }
+      data[0] = hs->protocol;
+      p->actual_length = 1;
+      break;
+    case HID_SET_PROTOCOL:
+      if (hs->kind != HID_MOUSE) {
+        goto fail;
+      }
+      hs->protocol = value;
+      break;
+    case HID_GET_IDLE:
+      data[0] = hs->idle;
+      p->actual_length = 1;
+      break;
+    case HID_SET_IDLE:
+      hs->idle = (uint8_t) (value >> 8);
+      hid_set_next_idle(hs);
+      if (hs->kind == HID_MOUSE || hs->kind == HID_TABLET) {
+        hid_pointer_activate(hs);
+      }
+      break;
+
     default:
-        info_report("usb_auth_handle_control: unknown control %x", request);
-        p->status = USB_RET_STALL;
-        break;
+      fail:
+      info_report("usb_auth_handle_control: unknown control %x", request);
+      p->status = USB_RET_STALL;
+      break;
   }
 }
 
@@ -1402,6 +1548,10 @@ static void usb_auth_realize(USBDevice *dev, Error **errp)
 
   as->intr = usb_ep_get(dev, USB_TOKEN_IN, 1);
 
+  // Initialize hid part
+  hid_init(&as->hid, HID_MOUSE, usb_hid_changed);
+
+
   for (i = 0; i < 8; i++) {
     as->slots[i].initialized = false;
   }
@@ -1452,10 +1602,13 @@ static void usb_auth_class_initfn(ObjectClass *klass, void *data)
     fprintf(stderr, "Low error code: %s\n", mbedtls_low_level_strerr(ret));
   }
 
-  uc->realize = usb_auth_realize;
-  uc->product_desc = "QEMU USB Authentication";
+  uc->realize        = usb_auth_realize;
+  uc->unrealize      = usb_hid_unrealize;
+  uc->product_desc   = "QEMU USB Authentication";
   uc->handle_control = usb_auth_handle_control;
-  uc->handle_attach = usb_desc_attach;
+  uc->handle_data    = usb_hid_handle_data;
+  uc->handle_reset   = usb_hid_handle_reset;
+  uc->handle_attach  = usb_desc_attach;
 
   dc->vmsd = &vmstate_usb_auth;
   device_class_set_props(dc, usb_auth_properties);
diff --git a/include/hw/usb/dev-auth.h b/include/hw/usb/dev-auth.h
index aad0a3c01f..e74ba2df3f 100644
--- a/include/hw/usb/dev-auth.h
+++ b/include/hw/usb/dev-auth.h
@@ -93,6 +93,7 @@ typedef struct slot {
 struct UsbAuthState{
   USBDevice dev;
   USBEndpoint *intr;
+  HIDState hid;
   uint32_t usb_version;
   slot_t slots[USB_AUTH_MAX_SLOT];
   // Request state variables
-- 
2.50.0

